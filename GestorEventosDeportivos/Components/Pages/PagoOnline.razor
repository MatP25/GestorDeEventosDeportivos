@page "/pagos/{IdCarrera:guid}"
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using GestorEventosDeportivos.Modules.Carreras.Application.Services
@using GestorEventosDeportivos.Modules.Carreras.Domain.Entities
@using GestorEventosDeportivos.Modules.Carreras.Domain.Enums
@using GestorEventosDeportivos.Modules.ProgresoCarreras.Application
@using GestorEventosDeportivos.Modules.ProgresoCarreras.Domain.Entities
@using System.Security.Claims

@rendermode InteractiveServer

@inject NavigationManager Nav
@inject ICarreraService CarreraService
@inject IProgresoService ProgresoService
@inject SweetAlertService Swal;
@inject AuthenticationStateProvider AuthStateProvider

<script src="_content/CurrieTechnologies.Razor.SweetAlert2/sweetAlert2.min.js"></script>    


<PageTitle>Pago de inscripción</PageTitle>

@code
{
    private class ValidarFechaVencimiento : ValidationAttribute
    {
        protected override ValidationResult? IsValid(object? value, ValidationContext validationContext)
        {
            if (value is string fechaVencString)
            {
                if (DateTime.TryParseExact(fechaVencString, "MM/yy", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime fechaVencimiento))
                {
                    if (fechaVencimiento > DateTime.Now)
                    {
                        return ValidationResult.Success;
                    }
                    else
                    {
                        return new ValidationResult("La fecha de vencimiento debe ser en el futuro.");
                    }
                }
                else
                {
                    return new ValidationResult("La fecha ingresada no tiene un formato válido (MM/AA).");
                }
            }
            return new ValidationResult("La fecha de vencimiento es un campo obligatorio.");
        }
    }

    private class DatosTarjetaModel 
    {
        [Required(ErrorMessage = "El número de tarjeta es un campo obligatorio.")]
        [CreditCard(ErrorMessage = "El número de tarjeta ingresado no es válido.")]
        public string? NumeroTarjeta { get; set; } = "4417 1234 5678 9113";

        [Required(ErrorMessage = "El nombre del titular es un campo es obligatorio.")]
        public string? NombreTitular { get; set; }

        [Required(ErrorMessage = "El número de verificación de la tarjeta es un campo es obligatorio.")]
        [RegularExpression(@"^\d{3,4}$", ErrorMessage = "El código de verificación ingresado no es válido.")]
        public string? CVV { get; set; }

        [Required(ErrorMessage = "La fecha de vencimiento es un campo es obligatorio.")]
        [ValidarFechaVencimiento]
        public string? FechaVencimiento { get; set; }
    }
}


<div class="container text-center mb-5">
    <h2>Formulario de pago</h2>
    
    @if(!existeParticipacion || carrera is null) 
    {
        <div class=" mt-3 mb-3 p-4 bg-danger bg-opacity-10 border-danger">
            <p class="text-danger">
                Ocurrió un error al obtener los datos de la carrera o el usuario. Intente de nuevo más tarde.
            </p>
        </div>
    }

    @if (existeParticipacion && carrera is not null) {

        <EditForm
            Model="@Model"
            OnValidSubmit="ValidFormSubmitted"
            OnInvalidSubmit="InvalidFormSubmitted"
            class="form-container container" 
            >
            <DataAnnotationsValidator/>
            <AntiforgeryToken />

            <div class="justify-content-center">
                <div class="p-4 text-start border-info bg-info bg-opacity-10">
                    <p>Carrera: @carrera.Evento!.Nombre - @carrera.Evento.Ubicacion</p>
                    <p>Costo de inscripcion: UY$1000.</p>
                    <p>Este pago no es reembolsable.</p>
                </div>

                <div class="form-group row">
                    <label class="form-label text-start">
                        Numero de tarjeta: 
                        <InputText class="form-control" placeholder="4417 1234 5678 9113"
                            @bind-Value="Model!.NumeroTarjeta" 
                        />
                    </label>
                    <ValidationMessage For="() => Model.NumeroTarjeta"/>
                </div>

                <div class="form-group row">
                    <label class="form-label text-start">
                        Titular: 
                        <InputText class="form-control" 
                            @bind-Value="Model!.NombreTitular" 
                        />
                    </label>
                    <ValidationMessage For="() => Model.NombreTitular"/>
                </div>

                <div class="form-group row">
                    <label class="form-label text-start">
                        CVV: 
                        <InputText class="form-control" 
                            @bind-Value="Model!.CVV" 
                        />
                    </label>
                    <ValidationMessage For="() => Model.CVV"/>
                </div>

                <div class="form-group row">
                    <label class="form-label text-start">
                        Fecha de vencimiento (MM/AA): 
                        <InputText class="form-control" placeholder="12/29"
                            @bind-Value="Model!.FechaVencimiento" 
                        />
                    </label>
                    <ValidationMessage For="() => Model.FechaVencimiento"/>
                </div>
            </div>

            <div class="mt-2 ">
                <input 
                    class="btn btn-primary"
                    type="submit"
                    value="Enviar"/>
            </div>
        </EditForm>
    }
    
</div>

@code 
{
    [SupplyParameterFromForm]
    private DatosTarjetaModel? Model { get; set; }
    [Parameter] public Guid IdCarrera { get; set; }
    private Guid idUsuario { get; set; } = Guid.Empty;
    private Carrera? carrera { get; set; }
    private bool existeParticipacion = false;

    protected override async Task OnInitializedAsync()
    {
        try {
            idUsuario = await ObtenerAutenticacion();

            carrera = await CarreraService.ObtenerCarreraConDetalle(IdCarrera);
            if (carrera is not null) {
                Participacion? participacion = await ProgresoService.VerProgresoDeParticipanteEnCarrera(carrera.EventoId, idUsuario);
                if (participacion is not null) existeParticipacion = true;
            }
        } catch (Exception) {
            existeParticipacion = false;
        }
        Model ??= new DatosTarjetaModel();
    }

    private async Task<Guid> ObtenerAutenticacion() {
        AuthenticationState? state = await AuthStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal? user = state.User;

        string? idStr = user.FindFirstValue(ClaimTypes.NameIdentifier);
        if (Guid.TryParse(idStr, out var id)) {
            return id;
        }
        return Guid.Empty;
    }

    private async Task ValidFormSubmitted(EditContext editContext) {
        bool respuesta = await AlertSolicitudConfirmacion(
            "¿Confirma el pago de UY$1000?", 
            "Esta acción no es reversible.");

        if (!respuesta) return;


        try {
            bool resultado = await CarreraService.ActualizarEstadoPagoParticipacion(IdCarrera, idUsuario, EstadoPago.Confirmado);
            if (resultado) {
                AlertPagoExitoso();
            }
        } catch (NotFoundException ex) {
            AlertPagoFallido(ex.Message);
        } catch (Exception) {
            AlertPagoFallido("Ocurrió un error inesperado, intente de nuevo más tarde");
        }
    }

    private void InvalidFormSubmitted(EditContext editContext) {
        AlertFormInvalido();
    }

    private async Task<bool> AlertSolicitudConfirmacion(string titulo, string mensaje) {
        SweetAlertResult? respuesta = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = titulo,
            Text = mensaje,
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Sí, estoy seguro",
            CancelButtonText = "Cancelar"
        });

        if (!string.IsNullOrEmpty(respuesta.Value) && respuesta.IsConfirmed) {
            return true;
        }
        return false;
    }

    private async void AlertFormInvalido() {
        await Swal.FireAsync(
            "Error", 
            "El formulario tiene datos inválidos, por favor verifique los campos", 
            "error");
    }

    private async void AlertPagoFallido(string mensaje) {
        await Swal.FireAsync(
            "Error", 
            mensaje, 
            "error");
    }

    private async void AlertPagoExitoso() {
        await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Pago Confirmado",
            Text = "Su inscripción ha sido confirmada exitosamente",
            Icon = SweetAlertIcon.Success,
            ConfirmButtonText = "Aceptar",
        }).ContinueWith( _ => 
            Nav.NavigateTo($"carreras/{carrera!.Id}/detalles")
        );

        
    }
}