@using GestorEventosDeportivos.Modules.Carreras.Application.Services
@using System.Security.Claims
@using System.Linq
@using GestorEventosDeportivos.Modules.Carreras.Domain.Entities
@using GestorEventosDeportivos.Modules.Carreras.Domain.Enums
@using GestorEventosDeportivos.Modules.ProgresoCarreras.Application
@using GestorEventosDeportivos.Modules.ProgresoCarreras.Domain.Entities
@using GestorEventosDeportivos.Modules.Usuarios.Application.Services

@inject ICarreraService CarreraService
@inject IUsuarioServices UsuarioService
@inject IProgresoService ProgresoService
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthStateProvider
@inject SweetAlertService Swal;

<script src="_content/CurrieTechnologies.Razor.SweetAlert2/sweetAlert2.min.js"></script> 

<div class="mb-3">
    @if (_usuarioEsAdmin) {
        if (_estadoEvento != EstadoEvento.Finalizado && _estadoEvento != EstadoEvento.EnCurso) {
            if (_registroHabilitado) {
                <button class="btn btn-danger" @onclick="DeshabilitarInscripciones">
                    Deshabilitar inscripciones
                </button>
            } else {
                <button class="btn btn-primary" @onclick="HabilitarInscripciones">
                    Habilitar inscripciones
                </button>
            }
        }
    } else {
        if (_cargando) {
            <button class="btn btn-info" disabled>
                Cargando...
            </button>
        } else {
            if (!_registroHabilitado && !_usuarioEstaInscripto) { 
                // Si no esta habilitado el registro y no esta inscripto no lo dejo inscribirse
                <button class="btn btn-secondary" disabled>
                    Registro no habilitado
                </button>
            } else if (_registroHabilitado && !_usuarioEstaInscripto) {
                // Si esta habilitado el registro y no esta inscripto lo dejo inscribirse
                 <button class="btn btn-primary" @onclick="InscribirUsuario">
                    Inscribirme
                </button>
            } else if (_usuarioEstaInscripto) {
                if (_estadoEvento == EstadoEvento.SinComenzar) {
                    // Si esta inscripto y no ha comenzado lo dejo desinscribirse independientemente de si esta habilitado el registro
                    <button class="btn btn-danger" @onclick="DesinscribirUsuario">
                        Desinscribirme
                    </button>

                    if (_estadoPagoParticipacion == EstadoPago.NoRealizado) {
                        <button class="ms-4 btn btn-success" @onclick="IrAPagar">
                            Pagar Inscripción
                        </button>
                    } else if (_estadoPagoParticipacion == EstadoPago.AprobacionPendiente) { 
                        <button class="ms-4 btn btn-secondary" disabled>
                            Pago Pendiente de Aprobación
                        </button>
                    } else {
                        <button class="ms-4 btn btn-info" disabled>
                            Inscripción Paga
                        </button> 
                    }
                    
                } else if (_estadoEvento == EstadoEvento.EnCurso && _estadoParticipacion == EstadoParticipanteEnCarrera.EnCurso) {
                    <button class="btn btn-danger" @onclick="AbandonarCarrera">
                        Abandonar la carrera
                    </button>
                }
            }
        }
    }

</div>


@code 
{
    [Parameter] public Guid IdEvento { get; set; }
    [Parameter] public Guid IdCarrera { get; set; }
    [Parameter] public Action? ActualizarComponentePadre { get; set; }
    private bool _cargando = true;
    public bool _registroHabilitado = false;
    public EstadoEvento? _estadoEvento;
    private Guid _idUsuario = Guid.Empty;
    private bool _usuarioEstaInscripto = false;
    private List<Participacion> _participacionesUsuario = new();
    private bool _usuarioEsAdmin;
    private EstadoParticipanteEnCarrera _estadoParticipacion;
    private EstadoPago _estadoPagoParticipacion;

    protected override async Task OnInitializedAsync()
    {
        _idUsuario = await ObtenerAutenticacion();
        await ObtenerEstadoInscripcionDeUsuario();
        await ObtenerEstadoCarrera();

        _cargando = false;
    }

    private async Task<Guid> ObtenerAutenticacion() {
        AuthenticationState? state = await AuthStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal? user = state.User;

        _usuarioEsAdmin = user.IsInRole("Admin");

        string? idStr = user.FindFirstValue(ClaimTypes.NameIdentifier);
        if (Guid.TryParse(idStr, out var id)) {
            return id;
        }
        return Guid.Empty;
    }

    private async Task ObtenerEstadoCarrera() {
        Carrera? carrera = await CarreraService.ObtenerCarreraConDetalle(IdCarrera);
        if (carrera is not null) {
            _registroHabilitado = carrera.Evento!.RegistroHabilitado;
            _estadoEvento = carrera.Evento!.EstadoEvento;
            return;
        }
        _registroHabilitado = false;
    }

    private async Task ObtenerEstadoInscripcionDeUsuario() {
        if (_idUsuario != Guid.Empty) {
            _participacionesUsuario = (await UsuarioService.ObtenerParticipacionesDeUsuario(_idUsuario)).ToList();
            Participacion? p = _participacionesUsuario.FirstOrDefault(p => p.EventoId.Equals(IdEvento));
            if (p is null) {
                _usuarioEstaInscripto = false;
                _estadoPagoParticipacion = EstadoPago.NoRealizado;
                return;
            }
            _usuarioEstaInscripto = true;
            _estadoParticipacion = p.Estado;
            _estadoPagoParticipacion = p.EstadoPago;
        } else {
            _usuarioEstaInscripto = false;
        }
    }

    private async Task InscribirUsuario() {
        if (_idUsuario == Guid.Empty) {
            Nav.NavigateTo("/login");
            return;
        }

        try {
            _cargando = true;
            await CarreraService.AgregarParticipante(IdEvento, _idUsuario);
            AlertActualizacionExitosa("Inscripción exitosa");
        } catch(NotFoundException ex) {
            AlertActualizacionFallida(ex.Message);
        } catch(DuplicateException ex) {
            AlertActualizacionFallida(ex.Message);
        } catch(DomainRuleException ex) {
            AlertActualizacionFallida(ex.Message);
        } catch (Exception) {
            AlertActualizacionFallida("Ocurrió un error inesperado, intente de nuevo más tarde");
        } finally {
            await ActualizarComponente();
            ActualizarComponentePadre?.Invoke();
        }
    }

    private async Task DesinscribirUsuario() {
        if (_estadoPagoParticipacion == EstadoPago.Confirmado) {
            bool respuesta = await AlertSolicitudConfirmacion(
            "¿Está seguro que desea desinscribirse de la carrera?", 
            "Su pago ya fue procesado y el sistema no efectúa reembolsos. Al perder la inscripción deberá abonar nuevamente.");

            if (!respuesta) return;
        }
        
        try {
            _cargando = true;
            await CarreraService.QuitarParticipante(IdEvento, _idUsuario);
            AlertActualizacionExitosa("Actualización exitosa");
        } catch(NotFoundException ex) {
            AlertActualizacionFallida(ex.Message);
        } catch(DomainRuleException ex) {
            AlertActualizacionFallida(ex.Message);   
        } catch(Exception) {
            AlertActualizacionFallida("Ocurrió un error inesperado, intente de nuevo más tarde");
        } finally {
            await ActualizarComponente();
            ActualizarComponentePadre?.Invoke();
        }
    }

    private async Task AbandonarCarrera() {
        bool respuesta = await AlertSolicitudConfirmacion(
            "¿Está seguro que desea abandonar la carrera?", 
            "Esta acción no es reversible.");

        if (!respuesta) return;

        try {
            await ProgresoService.AbandonarCarrera(IdCarrera, _idUsuario);
            AlertActualizacionExitosa("Se ha abandonado la carrera");
        } catch(NotFoundException ex) {
            AlertActualizacionFallida(ex.Message);   
        } catch (DomainRuleException ex) {
            AlertActualizacionFallida(ex.Message);
        } catch(Exception) {
            AlertActualizacionFallida("Ocurrió un error inesperado, intente de nuevo más tarde");
        } finally {
            await ActualizarComponente();
        }
    }

    private async Task HabilitarInscripciones() {
        try {
            Evento? ev = await CarreraService.HabilitarRegistro(IdEvento);
            _registroHabilitado = ev!.RegistroHabilitado;
            AlertActualizacionExitosa("Las inscripciones fueron habilitadas");
        } catch(NotFoundException ex) {
            AlertActualizacionFallida(ex.Message);   
        } catch (DomainRuleException ex) {
            AlertActualizacionFallida(ex.Message);
        } catch(Exception) {
            AlertActualizacionFallida("Ocurrió un error inesperado, intente de nuevo más tarde");
        } finally {
            StateHasChanged();  
        }
    }

    private async Task DeshabilitarInscripciones() {
        try {
            Evento? ev = await CarreraService.DeshabilitarRegistro(IdEvento);
            _registroHabilitado = ev!.RegistroHabilitado;
            AlertActualizacionExitosa("Las inscripciones fueron deshabilitadas");
        } catch(NotFoundException ex) {
            AlertActualizacionFallida(ex.Message);   
        } catch(Exception) {
            AlertActualizacionFallida("Ocurrió un error inesperado, intente de nuevo más tarde");
        } finally {
            StateHasChanged();
        }
    }

    private async Task ActualizarComponente() {
        await ObtenerEstadoCarrera();
        await ObtenerEstadoInscripcionDeUsuario();
        _cargando = false;
        StateHasChanged();
    }

    private async Task<bool> AlertSolicitudConfirmacion(string titulo, string mensaje) {
        SweetAlertResult? respuesta = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = titulo,
            Text = mensaje,
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Sí, estoy seguro",
            CancelButtonText = "Cancelar"
        });

        if (!string.IsNullOrEmpty(respuesta.Value) && respuesta.IsConfirmed) {
            return true;
        }
        return false;
    }

    private async void AlertActualizacionFallida(string mensaje) {
        await Swal.FireAsync(
            "Error", 
            mensaje, 
            "error");
    }

    private async void AlertActualizacionExitosa(string mensaje) {
        await Swal.FireAsync(new SweetAlertOptions
        {
            Toast = true,
            Timer = 2000,
            Position = "top-end",
            Text = mensaje,
            Icon = "success"
        }
        );
    }

    private async void IrAPagar() {
        Nav.NavigateTo($"/pagos/{IdCarrera}");
    }
}