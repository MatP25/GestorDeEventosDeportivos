@page "/carreras/{id:guid}/detalles"
@using GestorEventosDeportivos.Modules.Carreras.Application.Services
@using GestorEventosDeportivos.Modules.Carreras.Domain.Entities
@using GestorEventosDeportivos.Modules.Carreras.Domain.Enums
@using GestorEventosDeportivos.Modules.ProgresoCarreras.Domain.Entities
@using GestorEventosDeportivos.Shared.Domain.Common
@using System.Security.Claims

@rendermode InteractiveServer

@inject ICarreraService CarreraService
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Detalles de la carrera</PageTitle>

<h1>Detalles de la carrera</h1>

<div class="mb-5">

    @if (cargando)
    {
        <p>Cargando carrera</p>
    }
    else if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger">@error</div>
    }
    else if (Carrera is null)
    {
        <div class="alert alert-warning">No se encontr칩 la carrera solicitada.</div>
    }
    else
    {
        <GestorEventosDeportivos.Components.Pages.ChildComponents.EncabezadoDetallesCarrera 
            Carrera="@Carrera"
        />

        <h4 class="mt-4">Participantes inscriptos (@_totalElementos)</h4>
        @if (_registroHabilitado) {
            <p>Hay @(Carrera?.Evento?.CapacidadParticipantes - _totalElementos) cupos disponibles.</p>
        }
        
        <GestorEventosDeportivos.Components.Pages.ChildComponents.BotonesInscripcionCarrera 
            IdEvento="@Carrera!.EventoId"
            IdCarrera="@Carrera.Id"
            ActualizarComponentePadre="@OnEventoDeInscripcion"
        />

        <div class="table-responsive">
            <table class="table table-sm align-middle">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Participante</th>
                        @if(_usuarioEsAdmin) {
                            <th>Estado del pago</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @{int Counter = 0;}
                    @foreach (var p in Participaciones)
                    {
                        <tr>
                            <td>@(_pagina > 1 ? ( _tamanoPagina * (_pagina - 1) + ++Counter ) : ++Counter )</td>
                            <td>@p.Participante?.Nombre @p.Participante?.Apellido</td>
                            @if(_usuarioEsAdmin) {
                                <td>
                                    <span class="badge @GetEstadoPagoBadge(@p.EstadoPago)">
                                        @p.EstadoPago.ToString()
                                    </span>
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="d-flex justify-content-between align-items-center mt-3">
            <button class="btn btn-outline-info" @onclick="PaginaAnterior" disabled="@(_pagina <= 1)">Anterior</button>
            <span>P치gina @_pagina de @_totalPaginas (@_totalElementos elementos)</span>
            <button class="btn btn-outline-info" @onclick="PaginaSiguiente" disabled="@(_pagina >= _totalPaginas)">Siguiente</button>
        </div>

        <GestorEventosDeportivos.Components.Pages.ChildComponents.PuntosDeControlCarrera
            Carrera="@Carrera"
        />

        <button class="btn btn-outline-secondary" @onclick="Volver">Volver</button>

    }
</div>

@code
{
    [Parameter] public Guid id { get; set; }

    private bool cargando = true;
    private string? error;
    private Carrera? Carrera;
    private List<Participacion> Participaciones = new();
    private int _pagina = 1;
    private int _tamanoPagina = 10;
    private int _totalPaginas = 1;
    private int _totalElementos = 0;
    private bool _registroHabilitado;
    private bool _usuarioEsAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        await ObtenerAutenticacion();

        try
        {
            cargando = true;
            error = null;
            // Cargar encabezado carrera (evento + PCs)
            Carrera? c = await CarreraService.ObtenerCarreraConDetalle(id);
            if (c is null)
            {
                error = "No se encontr칩 la carrera";
                return;
            }
            Carrera = c;
            _registroHabilitado = c.Evento!.RegistroHabilitado;
            // Primera p치gina de participantes
            await CargarPagina();
        }
        catch (Exception ex)
        {
            error = $"Error al cargar resultados: {ex.Message}";
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task CargarPagina()
    {
        if (Carrera is null) return;
        cargando = true;
        try
        {
            PagedResult<Participacion>? page = await CarreraService.ListarParticipacionesCarreraPaginado(Carrera.Id, _pagina, _tamanoPagina);
            Participaciones = page.Items.ToList();
            _totalElementos = page.TotalCount;
            _totalPaginas = page.TotalPages;
        }
        catch (Exception ex)
        {
            error = $"Error al cargar participantes: {ex.Message}";
        }
        finally
        {
            cargando = false;
            StateHasChanged();
        }
    }

    private async Task PaginaAnterior()
    {
        if (_pagina > 1)
        {
            _pagina--;
            await CargarPagina();
        }
    }

    private async Task PaginaSiguiente()
    {
        if (_pagina < _totalPaginas)
        {
            _pagina++;
            await CargarPagina();
        }
    }

    private void Volver()
    {
        Nav.NavigateTo("/carreras");
    }
    
    private async void OnEventoDeInscripcion()
    {
        await CargarPagina();
    }
    
    private async Task ObtenerAutenticacion() {
        AuthenticationState? state = await AuthStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal? user = state.User;

        _usuarioEsAdmin = user.IsInRole("Admin");
    }

    private string GetEstadoPagoBadge(EstadoPago est)
    {
        return est switch
        {
            EstadoPago.NoRealizado => "text-bg-danger",
            EstadoPago.AprobacionPendiente => "text-bg-warning",
            EstadoPago.Confirmado => "text-bg-success",
            _ => "text-bg-light"
        };
    }
}