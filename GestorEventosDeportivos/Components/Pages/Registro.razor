@page "/registro"
@using GestorEventosDeportivos.Modules.Usuarios.Application.Services
@using GestorEventosDeportivos.Modules.Usuarios.Domain.Entities
@using System.ComponentModel.DataAnnotations
@using GestorEventosDeportivos.Modules.EmailVerification.Application
@using Microsoft.AspNetCore.Components

@rendermode InteractiveServer
@inject IUsuarioServices usuarioServices
@inject SweetAlertService Swal;
@inject VerificationUserService UserVerificationService
@inject NavigationManager Nav

<script src="_content/CurrieTechnologies.Razor.SweetAlert2/sweetAlert2.min.js"></script>    


<PageTitle>Registro de Usuario</PageTitle>

@code {
    // Decorator personalizado para validar que la fecha de nacimiento ingresada sea inferior a la fecha actual y se tenga al menos 13 años
    private class ValidarFechaNac : ValidationAttribute
    {
        private readonly int EDAD_MINIMA = 13;

        protected override ValidationResult? IsValid(object? value, ValidationContext validationContext)
        {
            if (value is DateTime fechaNac)
            {
                if (DateOnly.FromDateTime(fechaNac) > DateOnly.FromDateTime(DateTime.Today))
                {
                    return new ValidationResult("La fecha no puede ser igual o posterior a la fecha actual");
                }

                int edad = DateTime.Today.Year - fechaNac.Year;
                if (edad >= EDAD_MINIMA) {
                    return ValidationResult.Success;
                }

                return new ValidationResult("La edad mínima para participar es 13 años");

            }
            return new ValidationResult("Formato de fecha inválido");
        }
    }

    // Modelo para la validacion de datos. 
    // Evitamos llenar la clase de dominio de controles de validacion que solo se utilizan en este formulario.
    private class RegistroModel {
        [Required(ErrorMessage = "El campo es obligatorio")]
        [StringLength(100, ErrorMessage = "El campo no puede exceder los 100 caracters")]
        public string? Nombre { get; set; }

        [Required(ErrorMessage = "El campo es obligatorio")]
        [StringLength(100, ErrorMessage = "El campo no puede exceder los 100 caracters")]
        public string? Apellido { get; set; }

        [Required(ErrorMessage = "El campo es obligatorio")]
        [EmailAddress(ErrorMessage = "El email ingresado no es válido")]
        public string? Email { get; set; }

        [Required(ErrorMessage = "El campo es obligatorio")]
        [ValidarFechaNac]
        public DateTime FechaNac { get; set; } = DateTime.Now;
        
        [Required(ErrorMessage = "El campo es obligatorio")]
        [MinLength(8, ErrorMessage = "La contraseña debe tener al menos 8 caracteres")]
        [MaxLength(100, ErrorMessage = "El campo no puede exceder los 100 caracters")]
        public string? Password { get; set; }

        [Compare(nameof(Password), ErrorMessage = "Las contraseñas no coinciden")]
        public string? PasswordConf { get; set; }
    }
}

<div class="container text-center">
    
    <EditForm
        Model="@Model"
        OnValidSubmit="ValidFormSubmitted"
        OnInvalidSubmit="InvalidFormSubmitted"
        class="form-container container" 
        >
        <DataAnnotationsValidator/>
        <AntiforgeryToken />
        
        <div class="justify-content-center">
            <div class="form-group row">
                <label class="form-label text-start">
                    Nombre: 
                    <InputText class="form-control" 
                        @bind-Value="Model!.Nombre" 
                    />
                </label>
                <ValidationMessage For="() => Model.Nombre"/>
            </div>
            
            <div class="form-group row">
                <label class="form-label text-start">
                Apellido: 
                <InputText 
                    class="form-control" 
                    @bind-Value="Model!.Apellido" 
                    />
                </label>
                <ValidationMessage For="() => Model.Apellido"/>

            </div>

            <div class="form-group row">
                <label class="form-label text-start">
                Fecha de nacimiento: 
                <InputDate 
                    class="form-control" 
                    @bind-Value="Model!.FechaNac" 
                    />
                </label>
                <ValidationMessage For="() => Model.FechaNac"/>
            </div>
            <div class="form-group row">
                <label class="form-label text-start">
                Email: 
                <InputText 
                    class="form-control" 
                    type="email" 
                    @bind-Value="Model!.Email" />
                </label>
                <ValidationMessage For="() => Model.Email"/>
            </div>
            <div class="form-group row">
                <label class="form-label text-start">
                Contraseña: 
                <InputText 
                    class="form-control" 
                    type="password" 
                    @bind-Value="Model.Password" />
                </label>
                <ValidationMessage For="() => Model.Password"/>
            </div>
            <div class="form-group row">
                <label class="form-label text-start">
                Confirmación de contraseña: 
                <InputText 
                    class="form-control" 
                    type="password" 
                    @bind-Value="Model.PasswordConf" />
                </label>
                 <ValidationMessage For="() => Model.PasswordConf"/>
            </div>
        </div>
        <div class="mt-2 ">
            <input 
                class="btn btn-primary"
                type="submit"
                value="Enviar"/>
            
        </div>
    </EditForm>

</div>



@code {

    [SupplyParameterFromForm]
    private RegistroModel? Model { get; set; }

    protected override void OnInitialized()
    {
        Model ??= new RegistroModel();
    }

    private async Task ValidFormSubmitted(EditContext editContext) {
       try {
            Usuario usuario = await usuarioServices.RegistrarUsuarioParticipante(Model!.Nombre!, Model!.Apellido!, Model!.Email!, Model!.Password!, DateOnly.FromDateTime(Model.FechaNac));
            AlertRegistroExitoso();
            var verUser = await UserVerificationService.RegisterAsync(Model!.Email!);
            Nav.NavigateTo($"/waiting/{verUser.Id}");
        } catch (InvalidDataException ex) {
            AlertRegistroFallido(ex.Message);
        } catch(DuplicateException ex) {
            AlertRegistroFallido(ex.Message);
        } catch(Exception) {
            AlertRegistroFallido("Ocurrió un error inesperado, intente de nuevo más tarde");
        }
    }

    private void InvalidFormSubmitted(EditContext editContext) {
        AlertFormInvalido();
    }

    private async void AlertFormInvalido() {
        await Swal.FireAsync(
            "Error", 
            "El formulario tiene datos inválidos, por favor verifique los campos", 
            "error");
    }

    private async void AlertRegistroFallido(string mensaje) {
        await Swal.FireAsync(
            "Error", 
            mensaje, 
            "error");
    }

    private async void AlertRegistroExitoso() {
        await Swal.FireAsync(
            "Registro Exitoso", 
            "Usuario creado exitosamente", 
            "success");
    }

}
