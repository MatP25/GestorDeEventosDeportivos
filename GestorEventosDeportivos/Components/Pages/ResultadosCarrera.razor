@page "/carreras/{id:guid}/resultados"
@using GestorEventosDeportivos.Modules.Carreras.Domain.Entities
@using GestorEventosDeportivos.Modules.Carreras.Application.Services
@using GestorEventosDeportivos.Modules.ProgresoCarreras.Domain.Entities
@using GestorEventosDeportivos.Modules.Carreras.Domain.Enums
@using Microsoft.AspNetCore.Components.Web

@rendermode InteractiveServer

@inject ICarreraService CarreraService
@inject NavigationManager Nav

<PageTitle>Resultados de la carrera</PageTitle>

<h1>Resultados de la carrera</h1>

@if (cargando)
{
    <p>Cargando resultados…</p>
}
else if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger">@error</div>
}
else if (Carrera is null)
{
    <div class="alert alert-warning">No se encontró la carrera solicitada.</div>
}
else
{
    <GestorEventosDeportivos.Components.Pages.ChildComponents.EncabezadoDetallesCarrera 
        Carrera="@Carrera"
    />

    <h4 class="mt-4">Participantes (@_totalElementos)</h4>
    @if (Participaciones.Count == 0)
    {
        <p class="text-muted">No hay participantes registrados para esta carrera.</p>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-sm align-middle">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Participante</th>
                        <th>Número</th>
                        <th>Estado</th>
                        <th>Tiempo</th>
                        <th>Puesto</th>
                        <th class="text-end">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var p in Participaciones)
                    {
                        <tr>
                            <td>@(++row)</td>
                            <td>@p.Participante?.Nombre @p.Participante?.Apellido</td>
                            <td>@p.NumeroCorredor</td>
                            <td><span class="badge @GetEstadoPartBadge(p.Estado)">@p.Estado</span></td>
                            <td>@TiempoDeParticipante(p)</td>
                            <td>@p.Puesto</td>
                            <td class="text-end">
                                @if (Carrera?.PuntosDeControl is { Count: > 0 })
                                {
                                    var abierto = _expandidos.Contains(p.Id);
                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => ToggleExpand(p.Id)">
                                        @(abierto ? "Ocultar" : "Tiempos puntos de control")
                                    </button>
                                }
                                else
                                {
                                    <span class="text-muted">Sin puntos</span>
                                }
                            </td>
                        </tr>
                        @if (_expandidos.Contains(p.Id))
                        {
                            <tr class="table-active">
                                <td colspan="7">
                                    @if (Carrera?.PuntosDeControl is { Count: > 0 })
                                    {
                                        <ul class="list-group list-group-flush">
                                            @foreach (var pc in Carrera.PuntosDeControl.OrderBy(pc => pc.Posicion))
                                            {
                                                TimeSpan? tpc = null;
                                                if (p.Progreso != null && p.Progreso.TryGetValue(pc.Posicion, out var tmp))
                                                {
                                                    tpc = tmp;
                                                }
                                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                                    <span>Punto de control @pc.Posicion</span>
                                                    <span class="fw-semibold">@(tpc.HasValue ? FormatearTiempo(tpc.Value) : "--")</span>
                                                </li>
                                            }
                                        </ul>
                                    }
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

        <div class="d-flex justify-content-between align-items-center mt-3">
            <button class="btn btn-outline-secondary" @onclick="PaginaAnterior" disabled="@(_pagina <= 1)">Anterior</button>
            <span>Página @_pagina de @_totalPaginas (@_totalElementos elementos)</span>
            <button class="btn btn-outline-secondary" @onclick="PaginaSiguiente" disabled="@(_pagina >= _totalPaginas)">Siguiente</button>
        </div>

    <GestorEventosDeportivos.Components.Pages.ChildComponents.PuntosDeControlCarrera
        Carrera="@Carrera"
    />
    
    }

    <button class="btn btn-outline-secondary" @onclick="Volver">Volver</button>
}

@code {
    [Parameter] public Guid id { get; set; }

    private bool cargando = true;
    private string? error;
    private Carrera? Carrera;
    private List<Participacion> Participaciones = new();
    private int row = 0;
    private uint? _ultimaPosicionPc;
    private HashSet<Guid> _expandidos = new();
    private int _pagina = 1;
    private int _tamanoPagina = 10;
    private int _totalPaginas = 1;
    private int _totalElementos = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            cargando = true;
            error = null;
            // Cargar encabezado carrera (evento + PCs)
            var cabecera = await CarreraService.ObtenerCarreraConDetalle(id);
            if (cabecera is null)
            {
                error = "No se encontró la carrera";
                return;
            }
            Carrera = cabecera;
            _ultimaPosicionPc = Carrera.PuntosDeControl?.Count > 0
                ? Carrera.PuntosDeControl.Max(pc => pc.Posicion)
                : null;

            // Primera página de participantes
            await CargarPagina();
        }
        catch (Exception ex)
        {
            error = $"Error al cargar resultados: {ex.Message}";
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task CargarPagina()
    {
        if (Carrera is null) return;
        cargando = true;
        try
        {
            row = 0;
            var page = await CarreraService.ListarParticipacionesCarreraPaginado(Carrera.Id, _pagina, _tamanoPagina);
            Participaciones = page.Items.ToList();
            _totalElementos = page.TotalCount;
            _totalPaginas = page.TotalPages;
        }
        catch (Exception ex)
        {
            error = $"Error al cargar participantes: {ex.Message}";
        }
        finally
        {
            cargando = false;
            StateHasChanged();
        }
    }

    private async Task PaginaAnterior()
    {
        if (_pagina > 1)
        {
            _pagina--;
            await CargarPagina();
        }
    }

    private async Task PaginaSiguiente()
    {
        if (_pagina < _totalPaginas)
        {
            _pagina++;
            await CargarPagina();
        }
    }

    private void Volver()
    {
        Nav.NavigateTo("/carreras");
    }

    private string TiempoDeParticipante(Participacion p)
    {
        if (p.Progreso == null || p.Progreso.Count == 0)
            return "--";

        // Tiempo del ultimo punto de control de la carrera
        if (_ultimaPosicionPc.HasValue && p.Progreso.TryGetValue(_ultimaPosicionPc.Value, out var tiempoFinalPc))
        {
            return FormatearTiempo(tiempoFinalPc);
        }

        // Tiempo del ultimo punto de control registrado
        var maxTiempo = p.Progreso.Values.Max();
        return FormatearTiempo(maxTiempo);
    }

    private static string FormatearTiempo(TimeSpan t)
    {
        if (t.TotalHours >= 1)
            return $"{(int)t.TotalHours:00}:{t.Minutes:00}:{t.Seconds:00}";
        return $"{t.Minutes:00}:{t.Seconds:00}";
    }

    private void ToggleExpand(Guid participacionId)
    {
        if (_expandidos.Contains(participacionId))
            _expandidos.Remove(participacionId);
        else
            _expandidos.Add(participacionId);
    }

    private string GetEstadoPartBadge(EstadoParticipanteEnCarrera est)
    {
        return est switch
        {
            EstadoParticipanteEnCarrera.SinComenzar => "text-bg-info",
            EstadoParticipanteEnCarrera.EnCurso => "text-bg-warning",
            EstadoParticipanteEnCarrera.Completada => "text-bg-success",
            EstadoParticipanteEnCarrera.Abandonada => "text-bg-secondary",
            _ => "text-bg-light"
        };
    }
}
